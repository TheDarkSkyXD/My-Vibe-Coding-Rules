---
description: Common files for all workspaces.
globs: *
alwaysApply: true
---
# Communication Rules

- Always respond in English for conversations.
- Avoid high-context explanations or indirect expressions such as "here you can do this," and instead provide specific code or solutions.
- Present answers to questions immediately, with detailed explanations added afterward.
- There is no need to paraphrase the user's questions in your own words.
- When answering with speculation or prediction without specific information sources, always explicitly state this.
- Propose multiple solutions and clearly indicate their merits and demerits.
- Actively consider new technologies and approaches.
- If information sources exist, clearly cite them together at the end of your response.
- Briefly explain the rationale for changes.

# Code Generation

- Always write deliverables in English unless otherwise specified.
- Ensure generated code is executable by repeatedly verifying its operation.
- For code modification requests, display only a few lines before and after the changed portions, avoiding unnecessary repetition of code.
- Divide into multiple code blocks as needed.
- Prioritize simple and non-redundant implementations.
- For tests only, avoid DRY (Don't Repeat Yourself) descriptions even if they become redundant.

# Security Considerations

- Always consider security best practices.
- Store API keys and secrets as environment variables.
- Thoroughly validate and verify user input.
- Consider countermeasures against common vulnerabilities.
- Implement authentication and authorization mechanisms appropriately.

# Development Flow

## Feature Development Steps

1. Create specifications for the Minimum Viable Product
2. Select and install development languages and frameworks needed for the specifications
3. Organize folder structure according to the development language and framework templates
4. List the files needed to create a Minimum Viable Product
5. Create tests that meet the specifications based on TDD principles
6. Follow the RED - GREEN - REFACTORING principles and implement step by step

<CORE_PRINCIPLES>
1. EXPLORATION OVER CONCLUSION
- Never rush to conclusions
- Keep exploring until a solution emerges naturally
- Question every assumption and inference

2. DEPTH OF REASONING
- Break down complex thoughts into simple steps
- Embrace uncertainty and revision
- Express thoughts in natural conversation

3. THINKING PROCESS
- Show work-in-progress thinking
- Acknowledge and explore alternatives
- Frequently reassess and revise
</CORE_PRINCIPLES>

<OUTPUT_FORMAT>
Responses must follow:
  <CONTEMPLATOR>
  - Begin with foundational observations
  - Question thoroughly
  - Show natural progression
  </CONTEMPLATOR>

  <FINAL_ANSWER>
  - Clear, concise summary
  - Note remaining questions
  </FINAL_ANSWER>
</OUTPUT_FORMAT>

* Always look for existing code to iterate on instead of creating new code.
* Focus only on code areas relevant to the assigned task
* Prefer iterating on existing code rather than creating new solutions
* Keep solutions simple and avoid introducing unnecessary complexity
* If you run into issues that take multiple iterations to fix. After you fix it, write up a description of the problem and how we fixed it and store it in a folder called "fixes", in an individual .md file with the name of the issue. Only do this for major issues and solutions.
* For issues that are taking multiple iterations to fix, check the fixes folder for previous fixes and see if the same issue has been fixed before.
* Keep a running list of patterns and technology used in the README.md file
* Reference the README.md file for patterns and technology used in the project
* If you run into the same persistent error, write logs and console messages to help track down the issue, and remember to check the logs after you make changes to see if the issue is resolved.
* If you are struggling with some piece of code, or aren't 100% sure on how to implement something, you can always use the firecrawl tool to research solutions.
* All tests should always pass before deploying to production. If they don't, make sure you notify me.
* Keep files under 500 lines of code; refactor when approaching this limit
* Mocking data is only needed for tests unless told otherwise, never mock data for dev or prod
* Maintain a clean, organized codebase
* Avoid code duplication by checking for similar existing functionality
* Write thorough tests for all major functionality
* Consider different environments (dev, test, prod) when writing code
* Unless explicitly instructed, instead of trying to gracefully handle an error or failure, make sure to fix the underlying issue.
* When being asked to refactor, make sure to look for duplicate code, duplicate files, and similar existing functionality. Also do not copy files and rename them so that we have two files, instead just edit the file that already exists.
* Make only requested changes or changes you're confident are well understood
* Never add stubbing or fake data patterns to code that affects the dev or prod environments
* Consider what other code areas might be affected by your changes
* Don't drastically change existing patterns without explicit instruction
* Never leave unstaged/untracked files after committing to git
* Don't create new branches unless explicitly requested
* Never commit .env files to version control
* Never overwrite .env files without first asking and confirming
* Avoid writing one-time scripts in permanent files
* Don't mock data except for tests (never for dev or prod environments)
* Exhaust all options using existing implementations before introducing new patterns
* If introducing a new pattern to replace an old one, remove the old implementation
* Never name files "improved-something" or "refactored-something"
* Focus on the areas of code relevant to the task
* Do not touch code that is unrelated to the task
* Write thorough tests for all major functionality
* Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly instructed
* Always think about what other methods and areas of code might be affected by code changes
* if a prompt bundles many features, slice into individual tasks and get confirmation; avoid big-bang merges