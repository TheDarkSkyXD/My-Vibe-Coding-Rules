---
description: 
globs: 
alwaysApply: true
---
# Secrets Management Best Practices

## Never Include Secrets in Code

- **NEVER** hardcode passwords, API keys, access tokens, or other secrets directly in source code
- Secrets in code are vulnerable to accidental exposure through version control
- Even in private repositories, secrets in code are a security risk

## Use Environment Variables

- Store sensitive information in environment variables
- Access environment variables in code instead of hardcoding values
- For Next.js projects, use `.env.local` for local development

Example of correct usage:
```javascript
// Good practice
const apiKey = process.env.API_KEY;
```

Example of what to avoid:
```javascript
// BAD PRACTICE - Never do this!
const apiKey = "sk_live_51HCO..."; 
```

## Environment Files Management

- Use `.env` files for environment variables
- ALWAYS add `.env*` files to `.gitignore` (except `.env.example`)
- Provide a `.env.example` file with the structure but NO real values

## Secret Management Services

- Consider using secret management services for production
- Options include AWS Secrets Manager, Google Secret Manager, or Vercel Environment Variables
- These services provide secure storage and access control for secrets

## Client-Side Security

- Never expose sensitive API keys in client-side code
- Use server-side routes or serverless functions to make authenticated API calls
- Remember that anything in the browser can be viewed by users

## Credential Rotation

- Rotate credentials regularly
- Implement procedures for credential revocation and rotation
- Have a plan for handling compromised credentials

