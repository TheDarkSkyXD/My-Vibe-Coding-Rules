---
description: Breaks work into small, testable commits with clear documentation
globs: *
alwaysApply: true
---

<rule>
name: frequent-commit-strategy
description: Breaks work into small, testable commits using conventional commit format

filters:
  - type: event
    pattern: "implementation_plan"
  - type: content
    pattern: "(?i)(implement|develop|create|build)"

actions:
  - type: transform
    pattern: "^.*$"
    replacement: |
      # Implementation Plan
      
      ## Conventional Commit Sequence
      
      {original_content}
      
      ## Commit Structure
      
      1. **feat: add initial project structure**
         - Tests: Basic smoke tests
         - Testable state: Can verify structure is correct
         - Format: `feat(module): add initial project structure`
      
      2. **feat: implement core business logic**
         - Tests: Unit tests for core algorithms
         - Testable state: Core functions work in isolation
         - Format: `feat(core): implement [feature] business logic`
      
      3. **feat: integrate component connections**
         - Tests: Integration tests for component interaction
         - Testable state: Components work together
         - Format: `feat(integration): connect [componentA] with [componentB]`
      
      4. **fix: add comprehensive error handling**
         - Tests: Error condition tests
         - Testable state: System handles failures gracefully
         - Format: `fix(error-handling): add validation for [scenario]`
      
      5. **chore: finalize implementation**
         - Tests: Performance tests, documentation validation
         - Testable state: Ready for production
         - Format: `chore(release): finalize documentation and optimization`

  - type: suggest
    message: |
      For effective implementation planning:
      
      1. Break work into small, testable commits
      2. Use conventional commit format: `type(scope): description`
      3. Choose the right type: feat, fix, docs, style, refactor, perf, test, chore
      4. Define a testable state for each commit
      5. Write tests before or alongside code

examples:
  - input: |
      Implement a new user authentication system.
    output: |
      # Implementation Plan
      
      ## Conventional Commit Sequence
      
      1. feat(user): add user model with authentication fields
      2. feat(auth): implement password hashing and validation
      3. feat(auth): create authentication service with login/logout
      4. feat(session): add session management functionality
      5. feat(middleware): implement authentication middleware
      6. feat(api): create login/logout endpoints
      7. fix(auth): add comprehensive error handling
      8. feat(security): implement rate limiting protection
      9. docs(auth): add documentation and integration examples
      
      ## Commit Structure
      
      1. **feat(user): add user model with authentication fields**
         - Tests: Schema validation tests
         - Testable state: Can create users with auth fields
         - Format: `feat(user): add user model with authentication fields`
      
      2. **feat(auth): implement password utilities**
         - Tests: Hash generation and verification tests
         - Testable state: Can hash and verify passwords
         - Format: `feat(auth): implement password hashing and validation`
      
      3. **feat(auth): create authentication service**
         - Tests: Authentication flow tests with mocks
         - Testable state: Service correctly authenticates valid credentials
         - Format: `feat(auth): create login/logout authentication service`
      
      4. **feat(session): add session management**
         - Tests: Session creation, validation, expiration tests
         - Testable state: Sessions work properly with timeouts
         - Format: `feat(session): add user session handling with timeouts`
      
      5. **feat(middleware): implement auth middleware**
         - Tests: Middleware correctly authenticates/rejects requests
         - Testable state: Protected routes require authentication
         - Format: `feat(middleware): implement route authentication`

metadata:
  priority: high
  version: 1.0
</rule>