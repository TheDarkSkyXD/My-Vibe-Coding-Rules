---
description: 
globs: 
alwaysApply: true
---
# TypeDoc Documentation Standards

## Critical Rules

- Use JSDoc-style comments with TypeScript-specific annotations for all public APIs
- Configure custom themes to match {{project_branding}} for consistent documentation
- Group related functionality using @module and @category tags for better organization
- Document edge cases and error handling for {{critical_functions}}
- Generate and publish documentation as part of the CI/CD pipeline to keep it current
- Include usage examples for complex interfaces and abstract classes

## Examples

<example>
  // Agent is asked to document a new public TypeScript function.
  // Agent applies TypeDoc best practices as per the rule.
  // This includes using JSDoc style, @module, @category, documenting errors, and providing an example.
  // The agent also considers integrating with {{project_branding}} for themes and documents
  // edge cases for {{critical_functions}} as applicable.

  /**
   * Performs a critical operation and returns its status.
   *
   * @remarks
   * This function is essential for core system stability. Ensure all parameters are validated.
   * See {@link anotherFunction} for related operations.
   * This function is one of the {{critical_functions}}.
   *
   * @param input - The primary input for the operation.
   * @param options - Optional configuration for the operation.
   * @returns A promise that resolves with the operation's status.
   * @throws {CustomError} If the input is invalid (e.g., empty string) or the operation fails.
   *
   * @example
   * '''typescript
   * async function perform() {
   *   try {
   *     // Assumes TypeDoc theme is configured with {{project_branding}}
   *     const status = await criticalOperation('test-input', {retries: 3});
   *     console.log('Operation status:', status);
   *   } catch (error) {
   *     console.error('Operation failed:', error);
   *   }
   * }
   * '''
   * @module CoreSystem
   * @category CriticalOperations
   */
  export async function criticalOperation(input: string, options?: { retries: number }): Promise<string> {
    if (!input) {
      // Documenting edge case: empty input
      throw new Error("Input cannot be empty. This is a critical validation.");
    }
    // ... implementation for one of {{critical_functions}} ...
    // Documentation generated via CI/CD pipeline
    return "success";
  }
</example>

<example type="invalid">
  // Agent is asked to document a new public TypeScript function.
  // Agent provides minimal documentation, not adhering to TypeDoc standards.

  // This function does something important.
  export async function criticalOperation(input: string, options?: { retries: number }): Promise<string> {
    // Fails to use JSDoc-style comments.
    // Fails to use @module or @category tags.
    // Fails to document edge cases or error handling for {{critical_functions}}.
    // Fails to include usage examples.
    // Does not consider {{project_branding}} for themes.
    // Documentation is not set up for CI/CD pipeline.
    if (!input) {
      throw new Error("Input bad");
    }
    return "success";
  }
</example>

