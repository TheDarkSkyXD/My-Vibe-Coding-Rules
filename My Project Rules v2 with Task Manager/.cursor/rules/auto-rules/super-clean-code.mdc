---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines for writing clean, maintainable, and human-readable code. Apply these rules when writing or reviewing code to ensure consistency and quality.
globs: 
---
# Clean Code Guidelines
# Clean Code Development Guide

You are a highly skilled software developer committed to writing clean, maintainable, and scalable code. Your goal is to adhere to industry best practices, including Robert C. Martin’s *Clean Code* principles, the SOLID principles, and software design philosophies like KISS (Keep It Simple, Stupid) and YAGNI (You Aren’t Gonna Need It).

## Core Principles

Code Quality:
- Maintain strict typing.
- Disallow untyped values and magic numbers.
- Use explicit enums for possible values.
- Avoid double negatives and ensure conditions are self-documenting.
- Use long, readable variable names reflecting domain concepts.
- Write the simplest code possible
- Eliminate duplication (DRY).

Length Limits:
- Max 20 lines per function : extract until you drop.
- Max 3 parameters per function.
- Max 300 lines per file.
- Max 10 sub-files per folder.

Responsibilities:
- One responsibility per file.
- Organize code by domain concepts (e.g., Communications, Player, Action).

Functions:
- No flag parameters; split into multiple functions if needed.
- Follow command-query separation.
- Use verbs for service methods that perform actions.

Errors:
- Fail fast and throw errors early.
- Use custom domain errors and translate errors to user language.
- Log errors in English with error codes.

Code Organization:
- Follow Ports & Adapters pattern with clear separation between entities, repositories, services, enums, events, listeners, and value objects.
- Favor composition over inheritance.


### **1. Clean Code (Robert C. Martin)**
- **Readable**: Code should be easy to understand without excessive comments.
- **Simple and Direct**: Avoid clever, overly complex solutions.
- **Consistent**: Maintain a uniform style across the project.
- **Minimal Dependencies**: Reduce unnecessary coupling between modules.
- **Expressive Naming**: Use meaningful class, method, and variable names.

### **2. SOLID Principles**
- **S – Single Responsibility Principle (SRP)**
  - A class should have only one reason to change.
  - Each module should focus on a single responsibility.
- **O – Open/Closed Principle (OCP)**
  - Software entities should be open for extension but closed for modification.
  - Use interfaces and abstract classes to allow flexible behavior without modifying existing code.
- **L – Liskov Substitution Principle (LSP)**
  - Subtypes must be substitutable for their base types without altering behavior.
  - Ensure derived classes do not break parent class contracts.
- **I – Interface Segregation Principle (ISP)**
  - Clients should not be forced to depend on interfaces they do not use.
  - Split large interfaces into smaller, specific ones.
- **D – Dependency Inversion Principle (DIP)**
  - High-level modules should not depend on low-level modules. Both should depend on abstractions.
  - Use dependency injection and avoid hardcoded dependencies.

### **3. KISS (Keep It Simple, Stupid)**
- **Simplicity Over Cleverness**: Favor simple, clear solutions over complicated ones.
- **Avoid Overengineering**: Only add features when necessary.
- **Reduce Cognitive Load**: Code should be understandable at a glance.

### **4. YAGNI (You Aren’t Gonna Need It)**
- **Build What’s Needed**: Don’t implement features until there’s a concrete use case.
- **Avoid Premature Generalization**: Write flexible code only when justified.
- **Refactor When Necessary**: Optimize code when requirements evolve, not before.


###  Constants Over Magic Numbers
- Replace hard-coded values with named constants
- Use descriptive constant names that explain the value's purpose
- Keep constants at the top of the file or in a dedicated constants file

## Meaningful Names
- Variables, functions, and classes should reveal their purpose
- Names should explain why something exists and how it's used
- Avoid abbreviations unless they're universally understood

## Smart Comments
- Don't comment on what the code does - make the code self-documenting
- Use comments to explain why something is done a certain way
- Document APIs, complex algorithms, and non-obvious side effects

## Single Responsibility
- Each function should do exactly one thing
- Functions should be small and focused
- If a function needs a comment to explain what it does, it should be split

## DRY (Don't Repeat Yourself)
- Extract repeated code into reusable functions
- Share common logic through proper abstraction
- Maintain single sources of truth

## Clean Structure
- Keep related code together
- Organize code in a logical hierarchy
- Use consistent file and folder naming conventions

## Encapsulation
- Hide implementation details
- Expose clear interfaces
- Move nested conditionals into well-named functions

## Code Quality Maintenance
- Refactor continuously
- Fix technical debt early
- Leave code cleaner than you found it

## Testing
- Write tests before fixing bugs
- Keep tests readable and maintainable
- Test edge cases and error conditions

## Version Control
- Write clear commit messages
- Make small, focused commits
- Use meaningful branch names

## Best Practices
- **Error Handling**: Fail fast with meaningful exceptions rather than silent failures.
- **Testing Strategy**:
  - **Unit Tests**: Small, isolated tests for functions/classes.
  - **Integration Tests**: Ensure components work together as expected.
  - **End-to-End Tests**: Validate the system from a user’s perspective.
- **Refactoring**: Improve code structure without altering behavior; use small, incremental changes.

## Code Smells to Avoid
- **Long Functions**: Break down into smaller, more manageable functions.
- **Large Classes**: Split responsibilities into smaller, focused classes.
- **Deep Nesting**: Reduce complexity by extracting methods and using early returns.
- **Duplicated Code**: DRY (Don’t Repeat Yourself) by extracting reusable logic.
- **Excessive Comments**: Clean code should not require excessive explanation.

By following these principles, you ensure that your code remains maintainable, scalable, and easy to understand. Prioritize readability, simplicity, and modular design in all development tasks.
